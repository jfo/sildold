Msandbox	./sandbox.c	/^int main(){$/
Msild	./sild.c	/^int main() {$/
Mtags	./tags	/^Msandbox	.\/sandbox.c	\/^int main(){$\/$/
add_label	./labels_list.c	/^void add_label(char* name, node * value){$/
atom	./builtins.c	/^node* atom(node* operand) {$/
butts	./sandbox.c	/^} butts;$/
car	./builtins.c	/^node* car(node* operand) {$/
cdr	./builtins.c	/^node* cdr(node* operand) {$/
cond	./builtins.c	/^node* cond(node* operands) {$/
cons	./builtins.c	/^node* cons(node* operands) {$/
copy_node	./builtins.c	/^node* copy_node(node* n) {$/
copy_node_with_substitution	./builtins.c	/^node* copy_node_with_substitution(node* n, node* n/
copy_single_node	./builtins.c	/^node* copy_single_node(node* n) {$/
count_list	./parser.c	/^int count_list(char* s) {$/
count_string_length	./parser.c	/^int count_string_length(char* s){$/
debuglist	./debugging.c	/^void debuglist(node* l) {$/
debuglistinner	./debugging.c	/^void debuglistinner(node* l, int depth) {$/
eq	./builtins.c	/^node* eq(node* operand) {$/
eval	./builtins.c	/^node* eval(node* n) {$/
evals	./debugging.c	/^void evals(char * s) {$/
find_label	./labels_list.c	/^node * find_label(char* current_label) {$/
find_labelin	./labels_list.c	/^node * find_labelin(char* current_label, label* la/
have	./test.sld	/^(lists can have (lists) as members)$/
label	./labels_list.c	/^} label;$/
lambda	./builtins.c	/^node* lambda(node* full_list) {$/
makelist	./parser.c	/^node * makelist(char* s) {$/
node	./parser.c	/^} node;$/
node_val	./parser.c	/^union node_val {$/
print_labels	./debugging.c	/^void print_labels(label * l) {$/
printlist	./debugging.c	/^void printlist(node* l) {$/
prints	./debugging.c	/^void prints(char * s) {$/
printtabs	./debugging.c	/^void printtabs(int depth) {$/
quote	./builtins.c	/^node* quote(node* operand) {$/
return_string	./parser.c	/^char* return_string(char* s){$/
syntax_error	./builtins.c	/^void syntax_error(char* err) {$/
test_all	./debugging.c	/^void test_all() {$/
